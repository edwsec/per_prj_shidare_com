{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///Users/Shared/edwsec/Documents/dev/microblog-simple/src/lib/posts.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport { remark } from 'remark';\nimport html from 'remark-html';\nimport { Post } from '@/types/post';\n\nconst postsDirectory = path.join(process.cwd(), 'posts');\nconst sectionsDirectory = path.join(process.cwd(), 'sections');\n\nexport function getAllPosts(): Post[] {\n  // Obtener nombres de archivos de la carpeta posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  \n  const allPostsData = fileNames\n    .filter((fileName) => fileName.endsWith('.md'))\n    .map((fileName) => {\n      // Remover \".md\" del nombre del archivo para obtener el slug\n      const slug = fileName.replace(/\\.md$/, '');\n\n      // Leer el archivo markdown como string\n      const fullPath = path.join(postsDirectory, fileName);\n      const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n      // Usar gray-matter para parsear el frontmatter del post\n      const matterResult = matter(fileContents);\n\n      // Combinar los datos con el slug\n      return {\n        slug,\n        title: matterResult.data.title,\n        date: matterResult.data.date,\n        content: matterResult.content,\n        excerpt: matterResult.data.excerpt,\n      };\n    });\n\n  // Ordenar posts por fecha y hora de creación (más recientes primero)\n  return allPostsData.sort((a, b) => {\n    const dateA = new Date(a.date);\n    const dateB = new Date(b.date);\n    \n    if (dateA < dateB) {\n      return 1;\n    } else if (dateA > dateB) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nexport function getPostsWithPagination(page: number = 1, limit: number = 8): { posts: Post[], totalPosts: number, totalPages: number, currentPage: number } {\n  const allPosts = getAllPosts();\n  const totalPosts = allPosts.length;\n  const totalPages = Math.ceil(totalPosts / limit);\n  const startIndex = (page - 1) * limit;\n  const endIndex = startIndex + limit;\n  const posts = allPosts.slice(startIndex, endIndex);\n\n  return {\n    posts,\n    totalPosts,\n    totalPages,\n    currentPage: page\n  };\n}\n\nexport function getPostBySlug(slug: string): Post | null {\n  try {\n    const fullPath = path.join(postsDirectory, `${slug}.md`);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n    // Usar gray-matter para parsear el frontmatter del post\n    const matterResult = matter(fileContents);\n\n    // Usar remark para convertir markdown a HTML\n    const processedContent = remark()\n      .use(html)\n      .processSync(matterResult.content);\n    const contentHtml = processedContent.toString();\n\n    // Combinar los datos con el slug y el contenido HTML\n    return {\n      slug,\n      title: matterResult.data.title,\n      date: matterResult.data.date,\n      content: contentHtml,\n      excerpt: matterResult.data.excerpt,\n    };\n  } catch {\n    return null;\n  }\n}\n\nexport function getAllPostSlugs(): string[] {\n  const fileNames = fs.readdirSync(postsDirectory);\n  return fileNames\n    .filter((fileName) => fileName.endsWith('.md'))\n    .map((fileName) => fileName.replace(/\\.md$/, ''));\n}\n\n// Section functions\nexport function getSectionBySlug(slug: string): { title: string; content: string } | null {\n  try {\n    const fullPath = path.join(sectionsDirectory, `${slug}.md`);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n    // Usar gray-matter para parsear el frontmatter del post\n    const matterResult = matter(fileContents);\n\n    // Usar remark para convertir markdown a HTML\n    const processedContent = remark()\n      .use(html)\n      .processSync(matterResult.content);\n    const contentHtml = processedContent.toString();\n\n    // Combinar los datos con el slug y el contenido HTML\n    return {\n      title: matterResult.data.title,\n      content: contentHtml,\n    };\n  } catch {\n    return null;\n  }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///Users/Shared/edwsec/Documents/dev/microblog-simple/src/app/profile/page.tsx"],"sourcesContent":["import { getSectionBySlug } from '@/lib/posts';\n\nexport default function ProfilePage() {\n  const section = getSectionBySlug('profile');\n\n  if (!section) {\n    return (\n      <div className=\"min-h-screen\" style={{ background: '#ffffff' }}>\n        <div className=\"w-full mx-auto px-6 py-12\">\n          <h1 className=\"text-3xl font-bold mb-6\" style={{ color: '#000000' }}>\n            Section not found\n          </h1>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\" style={{ background: '#ffffff' }}>\n      <div className=\"w-full mx-auto px-6 py-12\">\n        <h1 className=\"text-3xl font-bold mb-6\" style={{ color: '#000000' }}>\n          {section.title}\n        </h1>\n        \n        <div style={{ \n          backgroundColor: '#f8f9fa', \n          padding: '1.5rem', \n          borderRadius: '0.25rem',\n          border: '1px solid #e1e5e9'\n        }}>\n          <div \n            className=\"prose prose-lg\" \n            style={{ color: '#333333' }}\n            dangerouslySetInnerHTML={{ __html: section.content }}\n          />\n        </div>\n\n        {/* Footer */}\n        <footer className=\"mt-24 pt-8\" style={{ borderTop: '1px solid #e1e5e9' }}>\n          <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center\">\n            <p className=\"text-sm mb-4 md:mb-0\" style={{ color: '#666666' }}>\n              © 2004-{new Date().getFullYear()} shidare.com. Made with Next.js and Markdown.\n            </p>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,MAAM,UAAU,CAAA,GAAA,mHAAA,CAAA,mBAAgB,AAAD,EAAE;IAEjC,IAAI,CAAC,SAAS;QACZ,qBACE,8OAAC;YAAI,WAAU;YAAe,OAAO;gBAAE,YAAY;YAAU;sBAC3D,cAAA,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAG,WAAU;oBAA0B,OAAO;wBAAE,OAAO;oBAAU;8BAAG;;;;;;;;;;;;;;;;IAM7E;IAEA,qBACE,8OAAC;QAAI,WAAU;QAAe,OAAO;YAAE,YAAY;QAAU;kBAC3D,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;oBAA0B,OAAO;wBAAE,OAAO;oBAAU;8BAC/D,QAAQ,KAAK;;;;;;8BAGhB,8OAAC;oBAAI,OAAO;wBACV,iBAAiB;wBACjB,SAAS;wBACT,cAAc;wBACd,QAAQ;oBACV;8BACE,cAAA,8OAAC;wBACC,WAAU;wBACV,OAAO;4BAAE,OAAO;wBAAU;wBAC1B,yBAAyB;4BAAE,QAAQ,QAAQ,OAAO;wBAAC;;;;;;;;;;;8BAKvD,8OAAC;oBAAO,WAAU;oBAAa,OAAO;wBAAE,WAAW;oBAAoB;8BACrE,cAAA,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAE,WAAU;4BAAuB,OAAO;gCAAE,OAAO;4BAAU;;gCAAG;gCACvD,IAAI,OAAO,WAAW;gCAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO/C","debugId":null}}]
}